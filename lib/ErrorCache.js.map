{"version":3,"sources":["../source/ErrorCache.js"],"names":["ErrorCache","message","name","statusCode","statusText","Error","captureStackTrace","stack"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;IAOqBA,U;;;;;AACnB;;;;;;;AAOA,wBAA4B;AAAA;;AAAA,QAAhBC,OAAgB,uEAAN,IAAM;AAAA;AAC1B,sHAAMA,OAAN;AACA,UAAKC,IAAL,GAAY,cAAZ;AACA,UAAKC,UAAL,GAAkB,GAAlB;AACA,UAAKC,UAAL,GAAkB,cAAlB;AACA,UAAKH,OAAL,GAAeA,OAAf;;AACA,QAAII,KAAK,CAACC,iBAAV,EAA6B;AAC3BD,MAAAA,KAAK,CAACC,iBAAN,iDAA8BN,UAA9B;AACD,KAFD,MAEO;AACL,YAAKO,KAAL,GAAa,IAAIF,KAAJ,GAAYE,KAAzB;AACD;;AAVyB;AAW3B;;;oCAnBqCF,K","sourcesContent":["/**\n * Custom error message for cache fail\n *\n * @namespace ErrorCache\n * @class\n * @param {string | null} [message = null] - error details\n */\nexport default class ErrorCache extends Error {\n  /**\n   * Constructor generates error instance\n   * @memberof ErrorCache\n   * @constructor\n   * @param {string | null} [message = null] - error details\n   * @return {ErrorCache} - current instance\n   */\n  constructor(message = null) {\n    super(message);\n    this.name = \"Cache failed\";\n    this.statusCode = 500;\n    this.statusText = \"Cache failed\";\n    this.message = message;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorCache);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n}\n"],"file":"ErrorCache.js"}