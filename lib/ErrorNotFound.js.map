{"version":3,"sources":["../source/ErrorNotFound.js"],"names":["ErrorNotFound","message","name","statusCode","statusText","Error","captureStackTrace","stack"],"mappings":"iwBAAA;;;;;;MAOqBA,CAAAA,a,+EACnB;;;;;;KAOA,wBAA4B,cAAhBC,CAAAA,OAAgB,2DAAN,IAAM,qDAC1B,+GAAMA,OAAN,GACA,MAAKC,IAAL,CAAY,WAAZ,CACA,MAAKC,UAAL,CAAkB,GAAlB,CACA,MAAKC,UAAL,CAAkB,WAAlB,CACA,MAAKH,OAAL,CAAeA,OAAf,CACA,GAAII,KAAK,CAACC,iBAAV,CAA6B,CAC3BD,KAAK,CAACC,iBAAN,+CAA8BN,aAA9B,CACD,CAFD,IAEO,CACL,MAAKO,KAAL,CAAa,GAAIF,CAAAA,KAAJ,GAAYE,KAC1B,CAVyB,YAW3B,C,uDAnBwCF,K","sourcesContent":["/**\n * Custom error message for Not Found server response\n *\n * @namespace ErrorNotFound\n * @class\n * @param {string | null} [message = null] - error details\n */\nexport default class ErrorNotFound extends Error {\n  /**\n   * Constructor generates error instance\n   * @memberof ErrorNotFound\n   * @constructor\n   * @param {string | null} [message = null] - error details\n   * @return {ErrorNotFound} - current instance\n   */\n  constructor(message = null) {\n    super(message);\n    this.name = 'Not Found';\n    this.statusCode = 404;\n    this.statusText = 'Not Found';\n    this.message = message;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorNotFound);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n}\n"],"file":"ErrorNotFound.js"}