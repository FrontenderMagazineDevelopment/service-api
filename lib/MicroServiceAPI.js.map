{"version":3,"sources":["../source/MicroServiceAPI.js"],"names":["MicroServiceAPI","url","token","version","checkVersion","cache","process","undefined","env","TM_CACHE_CONFIG","log","cacheConfig","JSON","parse","enabled","error","Memcached","require","uri","TM_CACHE_SERVER","memcached","timeout","tmpVersion","match","slice","setToken","request","response","modified","ok","type","status","statusText","redirected","headers","_headers","raw","json","text","trim","length","key","value","ttl","Promise","resolve","reject","set","get","data","userOptions","ErrorBadRequest","messages","badRequest","requestStart","hrtime","updatedUrl","replace","Accept","Authorization","defaultOptions","method","options","encodedData","urlencode","stringify","getFromMemcached","parseResponse","serializeResponse","clone","serialized","setToMemcached","parseInt","ErrorCache","requestEnd","console","test","Error","name","header","toLowerCase","has","hasOwnProperty","getAll"],"mappings":"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","sourcesContent":["import fetch from \"isomorphic-fetch\";\nimport urlencode from \"urlencode\";\nimport md5 from \"js-md5\";\nimport ErrorBadRequest from \"./ErrorBadRequest\";\nimport ErrorCache from \"./ErrorCache\";\n\n/**\n * TM Micro Service Proto API\n *\n * @namespace MicroServiceAPI\n * @class\n * @param {string} url - service url\n * @param {string | null} [token = null] - user access tocken if available\n */\nexport default class MicroServiceAPI {\n  /**\n   * Constructor saves service url\n   * @memberof MicroServiceAPI\n   * @constructor\n   * @param {string} url - service url\n   * @param {string} [version = 'v1'] - service version\n   * @param {string | null} [token = null] - user access tocken if available\n   * @return {MicroServiceAPI} - current instance\n   */\n  constructor(url, token = null) {\n    /**\n     * Service URL\n     * @property {string} service url\n     */\n    this.url = url;\n\n    /**\n     * User access token\n     * @property {string | null} [token = null] - user access tocken if available\n     */\n    this.token = token;\n\n    this.cache =\n      process !== undefined &&\n      process.env !== undefined &&\n      process.env.TM_CACHE_CONFIG !== undefined;\n\n    this.log = false;\n\n    if (this.cache === true) {\n      try {\n        this.cacheConfig =\n          typeof process.env.TM_CACHE_CONFIG === \"string\"\n            ? JSON.parse(process.env.TM_CACHE_CONFIG)\n            : process.env.TM_CACHE_CONFIG;\n        this.log = this.cacheConfig.log;\n        if (\n          this.cacheConfig[this.url] === undefined ||\n          this.cacheConfig[this.url].enabled === false\n        ) {\n          this.cache = false;\n        }\n      } catch(error) {} // eslint-disable-line\n    }\n\n    if (this.cache === true) {\n      const Memcached = require('memcached', ); // eslint-disable-line\n      const uri = process.env.TM_CACHE_SERVER || \"127.0.0.1:11211\";\n      this.memcached = new Memcached(uri, {\n        timeout: this.cacheConfig.timeout\n      });\n    }\n\n    /**\n     * Service version\n     * @property {string} [version = 'v1'] - service version\n     */\n    const tmpVersion = this.url.match(/\\/v[\\d]+(.[\\d]+)?(.[\\d]+)?/);\n    this.version =\n      tmpVersion === null\n        ? \"v1\"\n        : MicroServiceAPI.checkVersion(tmpVersion[0].slice(1));\n\n    this.setToken = ::this.setToken;\n    this.request = ::this.request;\n  }\n\n  /**\n   * Object with class service messages\n   * @type {Object}\n   */\n  static messages = {\n    url: \"Wrong Service URL Format\",\n    version: \"Wrong Version Format\",\n    badRequest: \"Bad Request\"\n  };\n\n  /**\n   * Set access token\n   *\n   * @public\n   * @method setToken\n   * @memberof MicroServiceAPI\n   * @param {string} token - access token\n   */\n  setToken = token => {\n    this.token = token;\n  };\n\n  /**\n   * Set service version\n   *\n   * @public\n   * @method setVersion\n   * @memberof MicroServiceAPI\n   * @param {string} version - service version\n   */\n  setVersion = version => {\n    this.version = MicroServiceAPI.checkVersion(version);\n  };\n\n  /**\n   * Validate service version\n   * @method checkVersion\n   * @memberof MicroServiceAPI\n   *\n   * @param  {string} version - service version\n   * @throws {Error} - if URL do not match format Error will be thrown\n   * @return {string} version - service version\n   */\n  static checkVersion(version) {\n    if (!/^v[\\d]+(.[\\d]+)?(.[\\d]+)?$/i.test(version))\n      throw new Error(MicroServiceAPI.messages.version);\n    return version;\n  }\n\n  /**\n   * We need to create simplified version of response ready for serialization\n   *\n   * @method serializeResponse\n   * @memberof MicroServiceAPI\n   * @private\n   * @async\n   *\n   * @param  {Response}  response - response from fetch\n   * @return {Promise}            - simplified response version for memcached\n   */\n  // eslint-disable-next-line\n  async serializeResponse(response) {\n    const modified = {\n      ok: response.ok,\n      url: response.url,\n      type: response.type,\n      status: response.status,\n      statusText: response.statusText,\n      redirected: response.redirected,\n      headers: {\n        _headers: response.headers.raw()\n      },\n      json: null,\n      text: null\n    };\n\n    let text = null;\n    try {\n      text = await response.text();\n    } catch (error) {} // eslint-disable-line\n\n    let json = null;\n    try {\n      if (text !== null && text.trim().length > 0) {\n        json = JSON.parse(text);\n      }\n    } catch (error) {} // eslint-disable-line\n\n    return {\n      ...modified,\n      text,\n      json\n    };\n  }\n\n  /**\n   * Add methods to object\n   *\n   * @method parseResponse\n   * @memberof MicroServiceAPI\n   * @private\n   * @static\n   *\n   * @param  {object} response parsed object from memcached\n   * @return {object}          simplified copy of response\n   */\n  static parseResponse(response) {\n    const headers = {\n      ...response.headers\n    };\n    headers.get = name => {\n      const header = headers._headers[name.toLowerCase()];\n      return header ? header[0] : null;\n    };\n    // eslint-disable-next-line\n    headers.has = name => headers._headers.hasOwnProperty(name.toLowerCase());\n    headers.raw = () => headers._headers;\n    headers.getAll = name =>\n      headers.has(name) ? headers._headers[name.toLowerCase()] : [];\n    const json = () =>\n      new Promise(resolve => {\n        resolve(response.json);\n      });\n    const text = () =>\n      new Promise(resolve => {\n        resolve(response.text);\n      });\n    return {\n      ...response,\n      json,\n      text,\n      headers\n    };\n  }\n\n  /**\n   * Add object to memcache\n   *\n   * @method setToMemcached\n   * @memberof MicroServiceAPI\n   * @private\n   *\n   * @param {string} key - mamcache key\n   * @param {mixed} value - value\n   * @param {number} ttl - second to store\n   */\n  setToMemcached(key, value, ttl) {\n    return new Promise((resolve, reject) => {\n      this.memcached.set(key, value, ttl, error => {\n        if (error) return reject(error);\n        return resolve();\n      });\n    });\n  }\n\n  /**\n   * Get data from memcache\n   *\n   * @method getFromMemcached\n   * @memberof MicroServiceAPI\n   * @private\n   *\n   * @param  {string} key - memcache key\n   * @return {Promise} - promise which will resolve with data from memcache\n   */\n  getFromMemcached(key) {\n    return new Promise((resolve, reject) => {\n      this.memcached.get(key, (error, data) => {\n        if (error || data === undefined) {\n          reject(error);\n        } else {\n          resolve(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * Fetch remote resource\n   *\n   * @method request\n   * @memberof MicroServiceAPI\n   *\n   * @static\n   * @param {string} url - resource url\n   * @param {Object} userOptions - user defined options\n   * @return {Promise} - Promise with server {@link https://developer.mozilla.org/docs/Web/API/Response|Response}\n   */\n  async request(url, userOptions) {\n    if (url === undefined) {\n      throw new ErrorBadRequest(400, MicroServiceAPI.messages.badRequest);\n    }\n    let requestStart;\n    let requestEnd;\n    if (this.log) requestStart = process.hrtime();\n\n    const updatedUrl = url.replace(\n      /\\/v[\\d]+(.[\\d]+)?(.[\\d]+)?/i,\n      `/${this.version}`\n    );\n    let headers = {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Accept: \"application/json; charset=utf-8\",\n      \"Accept-Encoding\": \"deflate, gzip;q=1.0, *;q=0.5\"\n    };\n    if (this.token !== null) {\n      headers = {\n        ...headers,\n        Authorization: this.token\n      };\n    }\n    const defaultOptions = {\n      method: \"GET\",\n      headers,\n      data: {}\n    };\n\n    const options = { ...defaultOptions, ...userOptions };\n    options.headers = { ...headers, ...options.headers };\n    const encodedData = urlencode.stringify(options.data);\n    const uri =\n      encodedData.length === 0 ? updatedUrl : `${updatedUrl}?${encodedData}`;\n    const key = `${uri}---${md5(JSON.stringify(options))}`;\n\n    let response;\n\n    if (this.cache === true) {\n      try {\n        response = await this.getFromMemcached(key);\n        if (response !== undefined) {\n          return MicroServiceAPI.parseResponse(response);\n        }\n      } catch (error) {}  // eslint-disable-line\n    }\n    response = await fetch(uri, options);\n\n    if (this.cache === true && response.ok === true) {\n      try {\n        const serialized = await this.serializeResponse(response.clone());\n        await this.setToMemcached(\n          key,\n          serialized,\n          parseInt(this.cacheConfig[this.url].ttl, 10)\n        );\n      } catch (error) {\n        throw new ErrorCache(error);\n      }\n    }\n\n    if (this.log) {\n      requestEnd = process.hrtime();\n      requestStart = parseInt(\n        requestStart[0] * 1e3 + requestStart[1] * 1e-6,\n        10\n      );\n      requestEnd = parseInt(requestEnd[0] * 1e3 + requestEnd[1] * 1e-6, 10);\n\n      console.log(`\n        Запрос: ${options.method === undefined ? \"GET\" : options.method} ${uri}\n        Время получения данных: ${requestEnd - requestStart} мс.\n      `);\n    }\n\n    return response;\n  }\n}\n"],"file":"MicroServiceAPI.js"}