{"version":3,"sources":["../source/MicroServiceAPI.js"],"names":["MicroServiceAPI","url","token","version","checkVersion","cache","process","undefined","env","TM_CACHE_CONFIG","log","cacheConfig","JSON","parse","enabled","error","Memcached","require","uri","TM_CACHE_SERVER","memcached","timeout","tmpVersion","match","slice","setToken","request","response","modified","ok","type","status","statusText","redirected","headers","_headers","raw","json","text","trim","length","key","value","ttl","Promise","resolve","reject","set","get","data","userOptions","ErrorBadRequest","messages","badRequest","requestStart","hrtime","updatedUrl","replace","Accept","Authorization","defaultOptions","method","options","encodedData","urlencode","stringify","getFromMemcached","parseResponse","serializeResponse","clone","serialized","setToMemcached","parseInt","ErrorCache","requestEnd","console","test","Error","name","header","toLowerCase","has","hasOwnProperty","getAll"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport urlencode from 'urlencode';\nimport md5 from 'js-md5';\nimport ErrorBadRequest from './ErrorBadRequest';\nimport ErrorCache from './ErrorCache';\n\n/**\n * TM Micro Service Proto API\n *\n * @namespace MicroServiceAPI\n * @class\n * @param {string} url - service url\n * @param {string | null} [token = null] - user access tocken if available\n */\nexport default class MicroServiceAPI {\n  /**\n   * Constructor saves service url\n   * @memberof MicroServiceAPI\n   * @constructor\n   * @param {string} url - service url\n   * @param {string} [version = 'v1'] - service version\n   * @param {string | null} [token = null] - user access tocken if available\n   * @return {MicroServiceAPI} - current instance\n   */\n  constructor(url, token = null) {\n    /**\n    * Service URL\n    * @property {string} service url\n    */\n    this.url = url;\n\n    /**\n    * User access token\n    * @property {string | null} [token = null] - user access tocken if available\n    */\n    this.token = token;\n\n    this.cache =\n      process !== undefined &&\n      process.env !== undefined &&\n      process.env.TM_CACHE_CONFIG !== undefined;\n\n    this.log = false;\n\n    if (this.cache === true) {\n      try {\n        this.cacheConfig = typeof process.env.TM_CACHE_CONFIG === 'string' ? JSON.parse(process.env.TM_CACHE_CONFIG) : process.env.TM_CACHE_CONFIG;\n        this.log = this.cacheConfig.log;\n        if (\n          this.cacheConfig[this.url] === undefined ||\n          this.cacheConfig[this.url].enabled === false\n        ) {\n          this.cache = false;\n        }\n      } catch(error) {} // eslint-disable-line\n    }\n\n    if (this.cache === true) {\n      const Memcached = require('memcached', ); // eslint-disable-line\n      const uri = process.env.TM_CACHE_SERVER || '127.0.0.1:11211';\n      this.memcached = new Memcached(uri, { timeout: this.cacheConfig.timeout });\n    }\n\n    /**\n    * Service version\n    * @property {string} [version = 'v1'] - service version\n    */\n    const tmpVersion = this.url.match(/\\/v[\\d]+(.[\\d]+)?(.[\\d]+)?/);\n    this.version =\n      tmpVersion === null ? 'v1' : MicroServiceAPI.checkVersion(tmpVersion[0].slice(1));\n\n    this.setToken = ::this.setToken;\n    this.request = ::this.request;\n  }\n\n  /**\n   * Object with class service messages\n   * @type {Object}\n   */\n  static messages = {\n    url: 'Wrong Service URL Format',\n    version: 'Wrong Version Format',\n    badRequest: 'Bad Request',\n  };\n\n  /**\n  * Set access token\n  *\n  * @public\n  * @method setToken\n  * @memberof MicroServiceAPI\n  * @param {string} token - access token\n  */\n  setToken = token => {\n    this.token = token;\n  };\n\n  /**\n  * Set service version\n  *\n  * @public\n  * @method setVersion\n  * @memberof MicroServiceAPI\n  * @param {string} version - service version\n  */\n  setVersion = version => {\n    this.version = MicroServiceAPI.checkVersion(version);\n  };\n\n\n  /**\n  * Validate service version\n  * @method checkVersion\n  * @memberof MicroServiceAPI\n  *\n  * @param  {string} version - service version\n  * @throws {Error} - if URL do not match format Error will be thrown\n  * @return {string} version - service version\n  */\n  static checkVersion(version) {\n    if (!/^v[\\d]+(.[\\d]+)?(.[\\d]+)?$/i.test(version))\n      throw new Error(MicroServiceAPI.messages.version);\n    return version;\n  }\n\n  /**\n   * We need to create simplified version of response ready for serialization\n   *\n   * @method serializeResponse\n   * @memberof MicroServiceAPI\n   * @private\n   * @async\n   *\n   * @param  {Response}  response - response from fetch\n   * @return {Promise}            - simplified response version for memcached\n   */\n  // eslint-disable-next-line\n  async serializeResponse(response) {\n    const modified = {\n      ok: response.ok,\n      url: response.url,\n      type: response.type,\n      status: response.status,\n      statusText: response.statusText,\n      redirected: response.redirected,\n      headers: {\n        _headers: response.headers.raw(),\n      },\n      json: null,\n      text: null,\n    };\n\n    let text = null;\n    try {\n      text = await response.text();\n    } catch (error) {} // eslint-disable-line\n\n    let json = null;\n    try {\n      if (text !== null && text.trim().length > 0) {\n        json = JSON.parse(text);\n      }\n    } catch (error) {} // eslint-disable-line\n\n    return {\n      ...modified,\n      text,\n      json,\n    };\n  }\n\n  /**\n   * Add methods to object\n   *\n   * @method parseResponse\n   * @memberof MicroServiceAPI\n   * @private\n   * @static\n   *\n   * @param  {object} response parsed object from memcached\n   * @return {object}          simplified copy of response\n   */\n  static parseResponse(response) {\n    const headers = {\n      ...response.headers,\n    };\n    headers.get = name => {\n      const header = headers._headers[name.toLowerCase()];\n      return header ? header[0] : null;\n    };\n    // eslint-disable-next-line\n    headers.has = name => headers._headers.hasOwnProperty(name.toLowerCase());\n    headers.raw = () => headers._headers;\n    headers.getAll = name => (headers.has(name) ? headers._headers[name.toLowerCase()] : []);\n    const json = () =>\n      new Promise(resolve => {\n        resolve(response.json);\n      });\n    const text = () =>\n      new Promise(resolve => {\n        resolve(response.text);\n      });\n    return {\n      ...response,\n      json,\n      text,\n      headers,\n    };\n  }\n\n\n  /**\n   * Add object to memcache\n   *\n   * @method setToMemcached\n   * @memberof MicroServiceAPI\n   * @private\n   *\n   * @param {string} key - mamcache key\n   * @param {mixed} value - value\n   * @param {number} ttl - second to store\n   */\n  setToMemcached(key, value, ttl) {\n    return new Promise((resolve, reject) => {\n      this.memcached.set(key, value, ttl, error => {\n        if (error) return reject(error);\n        return resolve();\n      });\n    });\n  }\n\n\n  /**\n   * Get data from memcache\n   *\n   * @method getFromMemcached\n   * @memberof MicroServiceAPI\n   * @private\n   *\n   * @param  {string} key - memcache key\n   * @return {Promise} - promise which will resolve with data from memcache\n   */\n  getFromMemcached(key) {\n    return new Promise((resolve, reject) => {\n      this.memcached.get(key, (error, data) => {\n        if (error || data === undefined) {\n          reject(error);\n        } else {\n          resolve(data);\n        }\n      });\n    });\n  }\n\n  /**\n  * Fetch remote resource\n  *\n  * @method request\n  * @memberof MicroServiceAPI\n  *\n  * @static\n  * @param {string} url - resource url\n  * @param {Object} userOptions - user defined options\n  * @return {Promise} - Promise with server {@link https://developer.mozilla.org/docs/Web/API/Response|Response}\n  */\n  async request(url, userOptions) {\n    if (url === undefined) {\n      throw new ErrorBadRequest(400, MicroServiceAPI.messages.badRequest);\n    }\n    let requestStart;\n    let requestEnd;\n    if (this.log) requestStart = process.hrtime();\n\n    const updatedUrl = url.replace(/\\/v[\\d]+(.[\\d]+)?(.[\\d]+)?/i, `/${this.version}`);\n    let headers = {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'application/json; charset=utf-8',\n      'Accept-Encoding': 'deflate, gzip;q=1.0, *;q=0.5',\n    };\n    if (this.token !== null) {\n      headers = {\n        ...headers,\n        Authorization: this.token,\n      };\n    }\n    const defaultOptions = {\n      method: 'GET',\n      headers,\n      data: {},\n    };\n\n    const options = { ...defaultOptions, ...userOptions };\n    options.headers = { ...headers, ...options.headers };\n    const encodedData = urlencode.stringify(options.data);\n    const uri = encodedData.length === 0 ? updatedUrl : `${updatedUrl}?${encodedData}`;\n    const key = `${uri}---${md5(JSON.stringify(options))}`;\n\n    let response;\n\n    if (this.cache === true) {\n      try {\n        response = await this.getFromMemcached(key);\n        if (response !== undefined) {\n          return MicroServiceAPI.parseResponse(response);\n        }\n      } catch (error) {}  // eslint-disable-line\n    }\n    response = await fetch(uri, options);\n\n    if (this.cache === true && response.ok === true) {\n      try {\n        const serialized = await this.serializeResponse(response.clone());\n        await this.setToMemcached(key, serialized, parseInt(this.cacheConfig[this.url].ttl, 10));\n      } catch (error) {\n        throw new ErrorCache(error);\n      }\n    }\n\n    if (this.log) {\n      requestEnd = process.hrtime();\n      requestStart = parseInt(((requestStart[0] * 1e3) + (requestStart[1]) * 1e-6), 10);\n      requestEnd = parseInt(((requestEnd[0] * 1e3) + (requestEnd[1]) * 1e-6), 10);\n\n      console.log(`\n        Запрос: ${options.method === undefined ? 'GET' : options.method} ${uri}\n        Время получения данных: ${requestEnd - requestStart} мс.\n      `);\n    }\n\n    return response;\n  }\n}\n"],"file":"MicroServiceAPI.js"}