"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");require("isomorphic-fetch");var _ErrorCache=_interopRequireDefault(require("../ErrorCache"));var code=500;var codeText="Cache failed";var message="Memcached have commit suicide";describe("Cache error",function(){it("Error should be thrown",function(){expect(function(){throw new _ErrorCache["default"](message)}).toThrow()});it("Error should properly transfer code",function(){try{throw new _ErrorCache["default"](message)}catch(error){expect(error.statusCode).toBe(code)}});it("Error should properly transfer code text",function(){try{throw new _ErrorCache["default"](message)}catch(error){expect(error.statusText).toBe(codeText)}});it("Error should properly transfer message",function(){try{throw new _ErrorCache["default"](message)}catch(error){expect(error.message).toBe(message)}});it("Error should set message as null if it omitter",function(){try{throw new _ErrorCache["default"]}catch(error){expect(error.message).toBe(null)}});it("Error should show proper stack trace",function(){try{throw new _ErrorCache["default"](message)}catch(error){expect(error.stack).not.toBe(undefined)}});it("Error should show proper stack trace if captureStackTrace unavailable",function(){try{Error.captureStackTrace=undefined;throw new _ErrorCache["default"](message)}catch(error){expect(error.stack).not.toBe(undefined)}})});
//# sourceMappingURL=ErrorCache.js.map