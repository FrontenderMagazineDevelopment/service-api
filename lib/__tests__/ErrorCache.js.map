{"version":3,"sources":["../../source/__tests__/ErrorCache.js"],"names":["code","codeText","message","describe","it","expect","ErrorCache","toThrow","error","statusCode","toBe","statusText","stack","not","undefined","Error","captureStackTrace"],"mappings":"gGAAA,4BACA,iEAEA,GAAMA,CAAAA,IAAI,CAAG,GAAb,CACA,GAAMC,CAAAA,QAAQ,CAAG,cAAjB,CACA,GAAMC,CAAAA,OAAO,CAAG,+BAAhB,CAEAC,QAAQ,CAAC,aAAD,CAAgB,UAAM,CAC5BC,EAAE,CAAC,wBAAD,CAA2B,UAAM,CACjCC,MAAM,CAAC,UAAM,CACX,KAAM,IAAIC,uBAAJ,CAAeJ,OAAf,CACP,CAFK,CAAN,CAEGK,OAFH,EAGD,CAJC,CAAF,CAMAH,EAAE,CAAC,qCAAD,CAAwC,UAAM,CAC9C,GAAI,CACF,KAAM,IAAIE,uBAAJ,CAAeJ,OAAf,CACP,CAAC,MAAOM,KAAP,CAAc,CACdH,MAAM,CAACG,KAAK,CAACC,UAAP,CAAN,CAAyBC,IAAzB,CAA8BV,IAA9B,CACD,CACF,CANC,CAAF,CAQAI,EAAE,CAAC,0CAAD,CAA6C,UAAM,CACnD,GAAI,CACF,KAAM,IAAIE,uBAAJ,CAAeJ,OAAf,CACP,CAAC,MAAOM,KAAP,CAAc,CACdH,MAAM,CAACG,KAAK,CAACG,UAAP,CAAN,CAAyBD,IAAzB,CAA8BT,QAA9B,CACD,CACF,CANC,CAAF,CAQAG,EAAE,CAAC,wCAAD,CAA2C,UAAM,CACjD,GAAI,CACF,KAAM,IAAIE,uBAAJ,CAAeJ,OAAf,CACP,CAAC,MAAOM,KAAP,CAAc,CACdH,MAAM,CAACG,KAAK,CAACN,OAAP,CAAN,CAAsBQ,IAAtB,CAA2BR,OAA3B,CACD,CACF,CANC,CAAF,CAQAE,EAAE,CAAC,gDAAD,CAAmD,UAAM,CACzD,GAAI,CACF,KAAM,IAAIE,uBACX,CAAC,MAAOE,KAAP,CAAc,CACdH,MAAM,CAACG,KAAK,CAACN,OAAP,CAAN,CAAsBQ,IAAtB,CAA2B,IAA3B,CACD,CACF,CANC,CAAF,CAQAN,EAAE,CAAC,sCAAD,CAAyC,UAAM,CAC/C,GAAI,CACF,KAAM,IAAIE,uBAAJ,CAAeJ,OAAf,CACP,CAAC,MAAOM,KAAP,CAAc,CACdH,MAAM,CAACG,KAAK,CAACI,KAAP,CAAN,CAAoBC,GAApB,CAAwBH,IAAxB,CAA6BI,SAA7B,CACD,CACF,CANC,CAAF,CAQAV,EAAE,CAAC,uEAAD,CAA0E,UAAM,CAChF,GAAI,CACFW,KAAK,CAACC,iBAAN,CAA0BF,SAA1B,CACA,KAAM,IAAIR,uBAAJ,CAAeJ,OAAf,CACP,CAAC,MAAOM,KAAP,CAAc,CACdH,MAAM,CAACG,KAAK,CAACI,KAAP,CAAN,CAAoBC,GAApB,CAAwBH,IAAxB,CAA6BI,SAA7B,CACD,CACF,CAPC,CAQH,CAvDO,CAAR","sourcesContent":["import 'isomorphic-fetch';\nimport ErrorCache from '../ErrorCache';\n\nconst code = 500;\nconst codeText = 'Cache failed';\nconst message = 'Memcached have commit suicide';\n\ndescribe('Cache error', () => {\n  it('Error should be thrown', () => {\n    expect(() => {\n      throw new ErrorCache(message);\n    }).toThrow();\n  });\n\n  it('Error should properly transfer code', () => {\n    try {\n      throw new ErrorCache(message);\n    } catch (error) {\n      expect(error.statusCode).toBe(code);\n    }\n  });\n\n  it('Error should properly transfer code text', () => {\n    try {\n      throw new ErrorCache(message);\n    } catch (error) {\n      expect(error.statusText).toBe(codeText);\n    }\n  });\n\n  it('Error should properly transfer message', () => {\n    try {\n      throw new ErrorCache(message);\n    } catch (error) {\n      expect(error.message).toBe(message);\n    }\n  });\n\n  it('Error should set message as null if it omitter', () => {\n    try {\n      throw new ErrorCache();\n    } catch (error) {\n      expect(error.message).toBe(null);\n    }\n  });\n\n  it('Error should show proper stack trace', () => {\n    try {\n      throw new ErrorCache(message);\n    } catch (error) {\n      expect(error.stack).not.toBe(undefined);\n    }\n  });\n\n  it('Error should show proper stack trace if captureStackTrace unavailable', () => {\n    try {\n      Error.captureStackTrace = undefined;\n      throw new ErrorCache(message);\n    } catch (error) {\n      expect(error.stack).not.toBe(undefined);\n    }\n  });\n});\n"],"file":"ErrorCache.js"}