{"version":3,"sources":["../../source/__tests__/ErrorServerResponse.js"],"names":["code","codeText","message","describe","it","expect","ErrorServerResponse","toThrow","error","statusCode","toBe","statusText","stack","not","undefined","Error","captureStackTrace"],"mappings":";;;;AAAA;;AACA;;AAEA,IAAMA,IAAI,GAAG,GAAb;AACA,IAAMC,QAAQ,GAAG,WAAjB;AACA,IAAMC,OAAO,GAAG,gBAAhB;AAEAC,QAAQ,CAAC,wBAAD,EAA2B,YAAM;AACvCC,EAAAA,EAAE,CAAC,wBAAD,EAA2B,YAAM;AACjCC,IAAAA,MAAM,CAAC,YAAM;AACX,YAAM,IAAIC,+BAAJ,CAAwBN,IAAxB,EAA8BC,QAA9B,EAAwCC,OAAxC,CAAN;AACD,KAFK,CAAN,CAEGK,OAFH;AAGD,GAJC,CAAF;AAMAH,EAAAA,EAAE,CAAC,qCAAD,EAAwC,YAAM;AAC9C,QAAI;AACF,YAAM,IAAIE,+BAAJ,CAAwBN,IAAxB,EAA8BC,QAA9B,EAAwCC,OAAxC,CAAN;AACD,KAFD,CAEE,OAAOM,KAAP,EAAc;AACdH,MAAAA,MAAM,CAACG,KAAK,CAACC,UAAP,CAAN,CAAyBC,IAAzB,CAA8BV,IAA9B;AACD;AACF,GANC,CAAF;AAQAI,EAAAA,EAAE,CAAC,0CAAD,EAA6C,YAAM;AACnD,QAAI;AACF,YAAM,IAAIE,+BAAJ,CAAwBN,IAAxB,EAA8BC,QAA9B,EAAwCC,OAAxC,CAAN;AACD,KAFD,CAEE,OAAOM,KAAP,EAAc;AACdH,MAAAA,MAAM,CAACG,KAAK,CAACG,UAAP,CAAN,CAAyBD,IAAzB,CAA8BT,QAA9B;AACD;AACF,GANC,CAAF;AAQAG,EAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAM;AACjD,QAAI;AACF,YAAM,IAAIE,+BAAJ,CAAwBN,IAAxB,EAA8BC,QAA9B,EAAwCC,OAAxC,CAAN;AACD,KAFD,CAEE,OAAOM,KAAP,EAAc;AACdH,MAAAA,MAAM,CAACG,KAAK,CAACN,OAAP,CAAN,CAAsBQ,IAAtB,CAA2BR,OAA3B;AACD;AACF,GANC,CAAF;AAQAE,EAAAA,EAAE,CAAC,gDAAD,EAAmD,YAAM;AACzD,QAAI;AACF,YAAM,IAAIE,+BAAJ,CAAwBN,IAAxB,EAA8BC,QAA9B,CAAN;AACD,KAFD,CAEE,OAAOO,KAAP,EAAc;AACdH,MAAAA,MAAM,CAACG,KAAK,CAACN,OAAP,CAAN,CAAsBQ,IAAtB,CAA2B,IAA3B;AACD;AACF,GANC,CAAF;AAQAN,EAAAA,EAAE,CAAC,sCAAD,EAAyC,YAAM;AAC/C,QAAI;AACF,YAAM,IAAIE,+BAAJ,CAAwBN,IAAxB,EAA8BC,QAA9B,EAAwCC,OAAxC,CAAN;AACD,KAFD,CAEE,OAAOM,KAAP,EAAc;AACdH,MAAAA,MAAM,CAACG,KAAK,CAACI,KAAP,CAAN,CAAoBC,GAApB,CAAwBH,IAAxB,CAA6BI,SAA7B;AACD;AACF,GANC,CAAF;AAQAV,EAAAA,EAAE,CAAC,uEAAD,EAA0E,YAAM;AAChF,QAAI;AACFW,MAAAA,KAAK,CAACC,iBAAN,GAA0BF,SAA1B;AACA,YAAM,IAAIR,+BAAJ,CAAwBN,IAAxB,EAA8BC,QAA9B,EAAwCC,OAAxC,CAAN;AACD,KAHD,CAGE,OAAOM,KAAP,EAAc;AACdH,MAAAA,MAAM,CAACG,KAAK,CAACI,KAAP,CAAN,CAAoBC,GAApB,CAAwBH,IAAxB,CAA6BI,SAA7B;AACD;AACF,GAPC,CAAF;AAQD,CAvDO,CAAR","sourcesContent":["import 'isomorphic-fetch';\nimport ErrorServerResponse from '../ErrorServerResponse';\n\nconst code = 404;\nconst codeText = 'Not found';\nconst message = 'User not found';\n\ndescribe('Error Service Response', () => {\n  it('Error should be thrown', () => {\n    expect(() => {\n      throw new ErrorServerResponse(code, codeText, message);\n    }).toThrow();\n  });\n\n  it('Error should properly transfer code', () => {\n    try {\n      throw new ErrorServerResponse(code, codeText, message);\n    } catch (error) {\n      expect(error.statusCode).toBe(code);\n    }\n  });\n\n  it('Error should properly transfer code text', () => {\n    try {\n      throw new ErrorServerResponse(code, codeText, message);\n    } catch (error) {\n      expect(error.statusText).toBe(codeText);\n    }\n  });\n\n  it('Error should properly transfer message', () => {\n    try {\n      throw new ErrorServerResponse(code, codeText, message);\n    } catch (error) {\n      expect(error.message).toBe(message);\n    }\n  });\n\n  it('Error should set message as null if it omitter', () => {\n    try {\n      throw new ErrorServerResponse(code, codeText);\n    } catch (error) {\n      expect(error.message).toBe(null);\n    }\n  });\n\n  it('Error should show proper stack trace', () => {\n    try {\n      throw new ErrorServerResponse(code, codeText, message);\n    } catch (error) {\n      expect(error.stack).not.toBe(undefined);\n    }\n  });\n\n  it('Error should show proper stack trace if captureStackTrace unavailable', () => {\n    try {\n      Error.captureStackTrace = undefined;\n      throw new ErrorServerResponse(code, codeText, message);\n    } catch (error) {\n      expect(error.stack).not.toBe(undefined);\n    }\n  });\n});\n"],"file":"ErrorServerResponse.js"}