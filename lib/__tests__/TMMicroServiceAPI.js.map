{"version":3,"sources":["../../source/__tests__/TMMicroServiceAPI.js"],"names":["serviceUrl","serviceUrlNoVersion","token","describe","it","expect","MicroServiceAPI","not","toThrow","service","version","toBe","setVersion","error","message","setToken","statusCode","toEqual","statusText","get","reply","request","response","ok","query","sortBy","data","Promise","resolve"],"mappings":"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","sourcesContent":["import \"isomorphic-fetch\";\nimport nock from \"nock\";\nimport MicroServiceAPI from \"../MicroServiceAPI\";\n\nconst serviceUrl = \"//article.frontender.info/service/v3/\";\nconst serviceUrlNoVersion = \"//article.frontender.info/oauth/\";\nconst token = \"iddqdidclip\";\n\ndescribe(\"Micro Service API\", () => {\n  describe(\"Initialization: \", () => {\n    it(\"It should not throw exception if URL is valid\", () => {\n      expect(() => new MicroServiceAPI(serviceUrl)).not.toThrow();\n    });\n\n    it(\"It should get version from the url\", () => {\n      const service = new MicroServiceAPI(serviceUrl);\n      expect(service.version).toBe(\"v3\");\n    });\n\n    it(\"It should set version to v1 if there are none\", () => {\n      const service = new MicroServiceAPI(serviceUrlNoVersion);\n      expect(service.version).toBe(\"v1\");\n    });\n\n    it(\"It should throw exception if Version is invalid\", () => {\n      const service = new MicroServiceAPI(serviceUrl);\n      try {\n        service.setVersion(\"23423\");\n      } catch (error) {\n        expect(error.message).toBe(\"Wrong Version Format\");\n      }\n    });\n\n    it(\"Version should change, if you set it with method\", () => {\n      const version = \"v2\";\n      const service = new MicroServiceAPI(serviceUrl);\n      service.setVersion(version);\n      expect(service.version).toBe(version);\n    });\n\n    it(\"Token should be null, if not provided\", () => {\n      const service = new MicroServiceAPI(serviceUrl);\n      expect(service.token).toBe(null);\n    });\n\n    it(\"Token should be stored, if provided\", () => {\n      const service = new MicroServiceAPI(serviceUrl, token);\n      expect(service.token).toBe(token);\n    });\n\n    it(\"Token should change if you setup it with method\", () => {\n      const service = new MicroServiceAPI(serviceUrl);\n      service.setToken(token);\n      expect(service.token).toBe(token);\n    });\n  });\n\n  describe(\"Request: \", () => {\n    it(\"If you miss url argument Error should be thrown\", async () => {\n      try {\n        await new MicroServiceAPI(serviceUrl);\n      } catch (error) {\n        expect(error.statusCode).toEqual(400);\n        expect(error.statusText).toEqual(\"Bad Request\");\n      }\n    });\n\n    it(\"If token is set header should be added\", async () => {\n      nock(/[.]+/)\n        .get(\"/service/v3/\")\n        .reply(200);\n      const service = new MicroServiceAPI(serviceUrl, token);\n      const response = await service.request(`${serviceUrl}`);\n      expect(response.ok).toEqual(true);\n    });\n\n    it(\"If you set data, then it should be added to url\", async () => {\n      nock(/[.]+/)\n        .get(\"/service/v3/\")\n        .query({ sortBy: \"price\" })\n        .reply(200);\n      const service = new MicroServiceAPI(serviceUrl, token);\n      const response = await service.request(`${serviceUrl}`, {\n        data: {\n          sortBy: \"price\"\n        }\n      });\n      expect(response.ok).toEqual(true);\n    });\n\n    it(\"If should return Promise\", async () => {\n      nock(/[.]+/)\n        .get(\"/service/v3/\")\n        .reply(200);\n      const service = new MicroServiceAPI(serviceUrl);\n      const response = service.request(`${serviceUrl}`);\n      expect(Promise.resolve(response)).toEqual(response);\n    });\n  });\n});\n"],"file":"TMMicroServiceAPI.js"}