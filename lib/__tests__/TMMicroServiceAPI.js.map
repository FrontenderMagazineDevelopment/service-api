{"version":3,"sources":["../../source/__tests__/TMMicroServiceAPI.js"],"names":["serviceUrl","serviceUrlNoVersion","token","describe","it","expect","MicroServiceAPI","not","toThrow","service","version","toBe","setVersion","error","message","setToken","statusCode","toEqual","statusText","get","reply","request","response","ok","query","sortBy","data","Promise","resolve"],"mappings":"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","sourcesContent":["import \"isomorphic-fetch\";\nimport nock from \"nock\";\nimport MicroServiceAPI from \"../MicroServiceAPI\";\n\nconst serviceUrl = \"//article.frontender.info/service/v3/\";\nconst serviceUrlNoVersion = \"//article.frontender.info/oauth/\";\nconst token = \"iddqdidclip\";\n\ndescribe(\"Micro Service API\", () => {\n  describe(\"Initialization: \", () => {\n    it(\"It should not throw exception if URL is valid\", () => {\n      expect(() => new MicroServiceAPI(serviceUrl)).not.toThrow();\n    });\n\n    it(\"It should get version from the url\", () => {\n      const service = new MicroServiceAPI(serviceUrl);\n      expect(service.version).toBe(\"v3\");\n    });\n\n    it(\"It should set version to v1 if there are none\", () => {\n      const service = new MicroServiceAPI(serviceUrlNoVersion);\n      expect(service.version).toBe(\"v1\");\n    });\n\n    it(\"It should throw exception if Version is invalid\", () => {\n      const service = new MicroServiceAPI(serviceUrl);\n      try {\n        service.setVersion(\"23423\");\n      } catch (error) {\n        expect(error.message).toBe(\"Wrong Version Format\");\n      }\n    });\n\n    it(\"Version should change, if you set it with method\", () => {\n      const version = \"v2\";\n      const service = new MicroServiceAPI(serviceUrl);\n      service.setVersion(version);\n      expect(service.version).toBe(version);\n    });\n\n    it(\"Token should be null, if not provided\", () => {\n      const service = new MicroServiceAPI(serviceUrl);\n      expect(service.token).toBe(null);\n    });\n\n    it(\"Token should be stored, if provided\", () => {\n      const service = new MicroServiceAPI(serviceUrl, token);\n      expect(service.token).toBe(token);\n    });\n\n    it(\"Token should change if you setup it with method\", () => {\n      const service = new MicroServiceAPI(serviceUrl);\n      service.setToken(token);\n      expect(service.token).toBe(token);\n    });\n  });\n\n  describe(\"Request: \", () => {\n    it(\"If you miss url argument Error should be thrown\", async () => {\n      try {\n        await new MicroServiceAPI(serviceUrl);\n      } catch (error) {\n        expect(error.statusCode).toEqual(400);\n        expect(error.statusText).toEqual(\"Bad Request\");\n      }\n    });\n\n    it(\"If token is set header should be added\", async () => {\n      nock(/[.]+/)\n        .get(\"/service/v3/\")\n        .reply(200);\n      const service = new MicroServiceAPI(serviceUrl, token);\n      const response = await service.request(`${serviceUrl}`);\n      expect(response.ok).toEqual(true);\n    });\n\n    it(\"If you set data, then it should be added to url\", async () => {\n      nock(/[.]+/)\n        .get(\"/service/v3/\")\n        .query({ sortBy: \"price\" })\n        .reply(200);\n      const service = new MicroServiceAPI(serviceUrl, token);\n      const response = await service.request(`${serviceUrl}`, {\n        data: {\n          sortBy: \"price\"\n        }\n      });\n      expect(response.ok).toEqual(true);\n    });\n\n    it(\"If should return Promise\", async () => {\n      nock(/[.]+/)\n        .get(\"/service/v3/\")\n        .reply(200);\n      const service = new MicroServiceAPI(serviceUrl);\n      const response = service.request(`${serviceUrl}`);\n      expect(Promise.resolve(response)).toEqual(response);\n    });\n  });\n});\n"],"file":"TMMicroServiceAPI.js"}